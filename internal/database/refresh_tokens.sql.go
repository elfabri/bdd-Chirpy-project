// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: refresh_tokens.sql

package database

import (
	"context"
	"time"

	"github.com/google/uuid"
)

const getUserFromRToken = `-- name: GetUserFromRToken :one
SELECT token, created_at, updated_at, user_id, expires_at, revoked_at FROM refresh_tokens WHERE token = $1
`

func (q *Queries) GetUserFromRToken(ctx context.Context, token string) (RefreshToken, error) {
	row := q.db.QueryRowContext(ctx, getUserFromRToken, token)
	var i RefreshToken
	err := row.Scan(
		&i.Token,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.UserID,
		&i.ExpiresAt,
		&i.RevokedAt,
	)
	return i, err
}

const insertRToken = `-- name: InsertRToken :one
INSERT INTO refresh_tokens (token, created_at, updated_at, user_id, expires_at, revoked_at)
VALUES (
    $1,
    NOW(),
    NOW(),
    $2,
    $3,
    NULL
)
RETURNING token, created_at, updated_at, user_id, expires_at, revoked_at
`

type InsertRTokenParams struct {
	Token     string
	UserID    uuid.UUID
	ExpiresAt time.Time
}

func (q *Queries) InsertRToken(ctx context.Context, arg InsertRTokenParams) (RefreshToken, error) {
	row := q.db.QueryRowContext(ctx, insertRToken, arg.Token, arg.UserID, arg.ExpiresAt)
	var i RefreshToken
	err := row.Scan(
		&i.Token,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.UserID,
		&i.ExpiresAt,
		&i.RevokedAt,
	)
	return i, err
}

const refreshRToken = `-- name: RefreshRToken :exec
UPDATE refresh_tokens
SET token = $2, updated_at = NOW(), expires_at = $3
WHERE user_id = $1
`

type RefreshRTokenParams struct {
	UserID    uuid.UUID
	Token     string
	ExpiresAt time.Time
}

func (q *Queries) RefreshRToken(ctx context.Context, arg RefreshRTokenParams) error {
	_, err := q.db.ExecContext(ctx, refreshRToken, arg.UserID, arg.Token, arg.ExpiresAt)
	return err
}

const revokeRToken = `-- name: RevokeRToken :exec
UPDATE refresh_tokens
SET updated_at = NOW(), revoked_at = NOW()
WHERE token = $1
`

func (q *Queries) RevokeRToken(ctx context.Context, token string) error {
	_, err := q.db.ExecContext(ctx, revokeRToken, token)
	return err
}
